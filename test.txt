2020/3/31
start to learn git

git init //初始化git仓库

git add file //将file添加到准备提交队列

git commit -m "xxxx" //将准备队列中的file提交,并添加备注信息xxxx

git diff file //查看file修改的地方和不同（比较工作区和暂存区）

git status //获取当前仓库状态

git log //查看所有提交过的版本信息（提交历史）

git reflog //查看所有分支的操作记录（命令历史）

git reset --hard HEAD^ //回到上个版本

git reset --hard commit_id //回到指定的版本

don't betray yourself

============this is test======================

git diff HEAD -- file //比较工作区和版本库最新版本里file的差别

git checkout -- file //将工作区内容恢复到最近一次commit/add的状态（版本库/暂存区），文件删除（版本库中还存在）后也可以用这个恢复

git reset HEAD file  //将暂存区的file的修改退回到工作区

git rm file //将文件的删除状态记录到暂存区，后续需要commit提交发到分支状态（文件若最近被修改过或者提交到过暂存区，则此命令会报错）

git push origin master //将本地修改推送到远程库

-- git remote rm origin //删除原有clone方式

-- git remote add origin git@github.com:yourname/yourrepository.git  //将远程库关联到本地库，并使用SSH key 的方式

-- git clone git@github.com:yourname/yourrepository.git //将远程库clone到本地（会创建对应库名的文件夹并克隆库内容）

==================== branch ========================================

git switch -c xxx //创建并切换到xxx分支

git branch xxx  //创建xxx分支

git switch xxx //切换到xxx分支

git branch //查看分支情况，当前所在分支前会有*标记

git merge xxx //合并xxx分支到当前分支

git branch -d xxx //删除xxx分支

git merge --no-ff -m "xxx" branchname //合并分支时禁用快进模式，这样会生成一个新的提交版本，所以需要加上commit的信息(方便之后查看分支的情况)

git stash //将工作区修改的内容存储起来，将库状态设置为clean

git stash list //查看所有工作暂存的内容

git stash apply stash{x} //将当前工作区内容恢复到存储起来的状态，stash{x}是git stash list中的一个版本，但不会删除git stash list的内容

git stash drop //删除git stash list中存储的工作区内容

git stash pop //将当前工作区内容恢复到存储起来的状态并删除git stash list的内容

git cherry-pick commit_id //将指定的提交版本复制到当前分支里，并在当前分支上提交一个新版本

git branch -D xxx  //可以强行删除一个未合并的分支，正常情况下未合并的分支无法使用-d删除

****clone了远程库后本地只会有master分支，还需要新建分支并与远程库对应分支关联

git switch -c <branchname> origin/<branchname> //在本地新建branchname分支并关联到远程的branchname分支，此处可以在本地设置不一样的分支名（不建议）

git branch --set-upstream-to=origin/<branchname> dev //当本地此时所在分支未与远程对应分支关联时无法git pull 拉去远程分支内容，所以用此命令设置关联远程branchname

git pull //抓取远程对应分支最新的提交

git remote -v //查看远程库信息

==============变基=============================================

git rebase <branchname> //将当前分支的提交变基到<branchname>分支上

git rebase --onto <branchname1> <branchname2> <branchname3> //取出 <branchname3> 分支，找出它从 <branchname2> 分支分歧之后的补丁， 然后把这些补丁在 <branchname1> 分支上重放一遍，让 <branchname3> 看起来像直接基于 <branchname1> 修改一样

git rebase <branchname1> <branchname2> //将<branchname2>分支变基到<branchname1>分支，免去需要先切换到<branchname2>

git pull --rebase //将远程对应分支的最新提交变基到本地分支

***无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 
***变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。

============ tag ==============================

git tag <tagname> //创建标签到当前分支的head

git tag <tagname> commit_id //创建标签到当前分支的指定commit_id

git tag //查看版本库中所有的标签

git tag -a <tagname> -m "xxx" commit_id //将对应的commit_id打上标签并添加说明信息xxx

git show <tagname> //查看对应标签信息

git tag -d <tagname> //删除对应的标签

git push origin <tagname> //将对应标签推送到远程

git push origin --tags //一次性推送全部尚未推送到远程的本地标签

git push origin :refs/tags/<tagname>  //删除远程标签（需要先将本地对应标签删除？似乎并不需要！）

==================================自定义=====================================

****在版本库根目录下创建.gitignore,其中添加对应文件名或后缀可以使得git忽略对应文件,然后将.gitignore提交

git check-ignore -v <filename> //检查被忽略的<filename>被所在.gitignore文件中的第几行规则所忽略

git config --global alias.<newmethod> <oldmethod>  //将当前用户下的<oldmethod>命令别名设置为<newmethod>，例如git config --global alias.ci commit 以后就可以使用git ci -m "xxx"来提交文件了，要删除时可以找用户主目录下的.gitconfig文件

git push origin --delete <branchname>  //删除远程<branchname>分支